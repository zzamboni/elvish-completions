#+property: header-args:elvish :tangle dd.elv
#+property: header-args :mkdirp yes :comments no

#+title: Elvish completions for dd
#+author: Harry Cutts <eternal.linux@gmail.com>

#+name: module-summary
Completions for =dd=, including operands, conversions, and flags.

* Implementation

Conversions and flags are both specified as comma-separated lists, so let's have a single function for completing those, given a map of the options and their descriptions, and the argument typed so far (e.g. =foo,bar,b=). We simply take the already-typed options (before the last comma) and outputting each possible option with them tacked on to the start.

#+begin_src elvish
  use str

  fn -comma-sep-list {|options arg|
    var prefix = $arg[..(+ 1 (str:last-index $arg ','))]
    for option [(keys $options)] {
      edit:complex-candidate &display=$options[$option] $prefix$option
    }
  }
#+end_src

Now we define all the possible conversions and flags, as maps to pass to =-comma-sep-list=.

#+begin_src elvish
  var -convs = [
    &ascii=    "ascii      (from EBCDIC to ASCII)"
    &ebcdic=   "ebcdic     (from ASCII to EBCDIC)"
    &ibm=      "ibm        (from ASCII to alternate EBCDIC)"
    &block=    "block      (pad newline-terminated records with spaces to cbs-size)"
    &unblock=  "unblock    (replace trailing spaces in cbs-size records with newline)"
    &lcase=    "lcase      (change upper case to lower case)"
    &ucase=    "ucase      (change lower case to upper case)"
    &sparse=   "sparse     (try to seek rather than write all-NUL output blocks)"
    &swab=     "swab       (swap every pair of input bytes)"
    &sync=     "sync       (pad every input block with NULs to ibs-size; when used with block or unblock, pad with spaces rather than NULs)"
    &excl=     "excl       (fail if the output file already exists)"
    &nocreat=  "nocreat    (do not create the output file)"
    &notrunc=  "notrunc    (do not truncate the output file)"
    &noerror=  "noerror    (continue after read errors)"
    &fdatasync="fdatasync  (physically write output file data before finishing)"
    &fsync=    "fsync      (likewise, but also write metadata)"
  ]

  var -flags = [
    &append=     "append       (append mode (makes sense only for output; conv=notrunc suggested))"
    &direct=     "direct       (use direct I/O for data)"
    &directory=  "directory    (fail unless a directory)"
    &dsync=      "dsync        (use synchronized I/O for data)"
    &sync=       "sync         (likewise, but also for metadata)"
    &fullblock=  "fullblock    (accumulate full blocks of input (iflag only))"
    &nonblock=   "nonblock     (use non-blocking I/O)"
    &noatime=    "noatime      (do not update access time)"
    &nocache=    "nocache      (Request to drop cache.  See also oflag=sync)"
    &noctty=     "noctty       (do not assign controlling terminal from file)"
    &nofollow=   "nofollow     (do not follow symlinks)"
    &count_bytes="count_bytes  (treat 'count=N' as a byte count (iflag only))"
    &skip_bytes= "skip_bytes   (treat 'skip=N' as a byte count (iflag only))"
    &seek_bytes= "seek_bytes   (treat 'seek=N' as a byte count (oflag only))"
  ]
#+end_src

Now we can define all the operands, with their descriptions and completion functions. Completion functions will be passed only the part of the argument after the ~=~, allowing us to reuse things like =edit:complete-filename~=.

#+begin_src elvish
  var -operands = [
    &bs=    [&desc="read and write up to BYTES bytes at a time (default: 512); overrides ibs and obs"]
    &cbs=   [&desc="convert BYTES bytes at a time"]
    &conv=  [&desc="convert the file as per the comma separated symbol list"
             &comp={|arg| -comma-sep-list $-convs $arg }]
    &count= [&desc="copy only N input blocks"]
    &ibs=   [&desc="read up to BYTES bytes at a time (default: 512)"]
    &if=    [&desc="read from FILE instead of stdin"
             &comp=$edit:complete-filename~]
    &iflag= [&desc="read as per the comma separated symbol list"
             &comp={|arg| -comma-sep-list $-flags $arg }]
    &obs=   [&desc="write BYTES bytes at a time (default: 512)"]
    &of=    [&desc="write to FILE instead of stdout"
             &comp=$edit:complete-filename~]
    &oflag= [&desc="write as per the comma separated symbol list"
             &comp={|arg| -comma-sep-list $-flags $arg }]
    &seek=  [&desc="skip N obs-sized blocks at start of output"]
    &skip=  [&desc="skip N ibs-sized blocks at start of input"]
    &status=[&desc="The LEVEL of information to print to stderr"
             &comp={|arg| all [none noxfer progress] }]
  ]
#+end_src

The main completion function is only concerned with the last argument. First we need to know which part of the argument is the operand (before the ~=~).

#+begin_src elvish
  fn -completer {|@cmd|
    var last-arg = $cmd[-1]
    var op-length = (str:index $last-arg '=')
#+end_src

If there isn't an equals, we offer the operands (and =--help= and =--version=, the only "normal-looking" options) as completions.

#+begin_src elvish
  if (== -1 $op-length) {
    for op [(keys $-operands)] {
      edit:complex-candidate &display=$op'=  ('$-operands[$op][desc]')' &code-suffix='=' $op
    }

    edit:complex-candidate &display="--help  (display help and exit)" '--help'
    edit:complex-candidate &display="--version  (output version information and exit)" '--version'
#+end_src

Otherwise, we lop off the operand and its ~=~, so that we can use nice simple completion functions for the values.

#+begin_src elvish
  } else {
    var op = $last-arg[..$op-length]
    var arg = $last-arg[(+ 1 $op-length)..]

    if (has-key $-operands[$op] comp) {
      $-operands[$op][comp] $arg | each {|candidate|
#+end_src

Since some of the completion functions use =edit:complex-candidate=, we have to remake them with the operand added back on.

#+begin_src elvish
  if (eq (kind-of $candidate) map) {
            put (edit:complex-candidate $op'='$candidate[stem] &display=$candidate[display])
          } else {
            put $op'='$candidate
          }
        }
      }
    }
  }

  set edit:completion:arg-completer[dd] = $-completer~
#+end_src
