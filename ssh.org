#+title: Elvish completions for ssh
#+author: Diego Zamboni
#+email: diego@zzamboni.org

#+name: module-summary
Completions for =ssh=, =scp= and =sftp=.

This file is written in [[https://leanpub.com/lit-config][literate programming style]], to make it easy to explain. See [[file:ssh.elv][ssh.elv]] for the generated file.

* Table of Contents :TOC:noexport:
- [[#usage][Usage]]
- [[#implementation][Implementation]]
  - [[#libraries-and-global-variables][Libraries and global variables]]
  - [[#initialization][Initialization]]

* Usage

Install the =elvish-completions= package using [[https://elvish.io/ref/epm.html][epm]]:

#+begin_src elvish
use epm
epm:install github.com/zzamboni/elvish-completions
#+end_src

In your =rc.elv=, load this module:

#+begin_src elvish
use github.com/zzamboni/elvish-completions/ssh
#+end_src

Hosts for the completions will be read from the files listed in the =$config-files= variable. Here is its default value:

#+begin_src elvish :noweb-ref config-files
config-files = [ ~/.ssh/config /etc/ssh/ssh_config /etc/ssh_config ]
#+end_src

All hosts listed in =Host= sections of the config files will be provided for completion. Patterns including any metacharacters (=*=, =?= and =!=) will not be shown.

#+begin_example
  [~]─> ssh <tab>
   COMPLETING argument
   host1                host2                  host3
#+end_example

Completions are also provided for config options. If you type =-o<space>=  and press ~Tab~, a list of valid configuration options will be provided. The valid configuration options are automatically extracted from the =ssh_config= man page, if it's available.

#+begin_example
  [~]─> ssh -o <tab>
   COMPLETING argument _
   AddKeysToAgent=                   ControlPath=                HostKeyAlias=                  NoHostAuthenticationForLocalhost=  ServerAliveCountMax=
   AddressFamily=                    ControlPersist=             HostName=                      NumberOfPasswordPrompts=           ServerAliveInterval=
   BatchMode=                        DynamicForward=             HostbasedAuthentication=       PKCS11Provider=                    StreamLocalBindMask=
   ...
#+end_example

* Implementation
:PROPERTIES:
:header-args:elvish: :tangle (concat (file-name-sans-extension (buffer-file-name)) ".elv")
:header-args: :mkdirp yes :comments no
:END:

** Libraries and global variables

We first load a number of libraries, including =comp=, the Elvish [[file:comp.org][completion framework]].

#+begin_src elvish
  use ./comp
  use re
  use str
#+end_src

List of config files from which to extract hostnames.

#+begin_src elvish :noweb yes
  var config-files = [ ~/.ssh/config /etc/ssh/ssh_config /etc/ssh_config ]
#+end_src

** Initialization

The =-ssh-hosts= function extracts all hostnames from the files listed in =$config-files=. Nonexistent files in the list are ignored, and only hostnames which do not include glob characters (=*=, =?=, =!=) are returned.

#+begin_src elvish
  fn -ssh-hosts {
    var hosts = [&]
    all $config-files | each {|file|
      set _ = ?(cat $file 2>&-) | re:awk {|_ @f|
        if (re:match '^(?i)host$' $f[0]) {
          all $f[1..] | each {|p|
            if (not (re:match '[*?!]' $p)) {
              set hosts[$p] = $true
    }}}}}
    keys $hosts
  }
#+end_src

We store in =-ssh-options= all the possible configuration options, by parsing them directly from the =ssh_config= man page (if available). These are initialized by the =-gen-ssh-options= on first use to reduce load time, and cached so that any delay is only incurred once.

#+begin_src elvish
  var -ssh-options = []
  fn -gen-ssh-options {
    if (eq $-ssh-options []) {
      set -ssh-options = [(
          set _ = ?(cat (man -w ssh_config 2>&-)) |
          re:awk {|l @f| if (re:match '^\.It Cm' $l) { put $f[2] } } |
          comp:decorate &suffix='='
      )]
    }
    all $-ssh-options
  }
#+end_src

The =$ssh-opts= array stores the definitions of command-line options. For now we only complete:

- =-o= (including completions for its argument) generated with =-gen-ssh-options= defined above
- =-i/--inventory= generated with =comp:files= defined in =comp.elv=

#+begin_src elvish
  var ssh-opts = [
    [ &short= o
      &arg-required= $true
      &arg-completer= $-gen-ssh-options~
    ]
    [ &short= i
      &long= inventory
      &arg-required= $true
      &arg-completer= $comp:files~
    ]
  ]
#+end_src

=-ssh-host-completions= dynamically generates the completion definition for hostnames for ssh-related commands. The hostnames are extracted from the user's ssh config files by the =-ssh-hosts= function defined above. The completions for =ssh= and =scp=, for example, are the same except for the suffix that needs to be added to the hostnames in the completion, so we allow the suffix to be specified as an option. We also allow for a username to be specified at the beginning of the hostname (=user@=), and still generate the completions correctly, so you can type =ssh user@abc<Tab>= and the corresponding hostnames will be completed.

#+begin_src elvish
  fn -ssh-host-completions {|arg &suffix=''|
    var user-given = (str:join '' [(re:find '^(.*@)' $arg)[groups][1][text]])
    -ssh-hosts | each {|host| put $user-given$host } | comp:decorate &suffix=$suffix
  }
#+end_src

We use =-ssh-host-completions= to produce the actual completion definitions for =ssh=, =sftp= and =scp=. For =scp= we also complete local filenames.

#+begin_src elvish
  set edit:completion:arg-completer[ssh]  = (comp:sequence &opts=$ssh-opts [$-ssh-host-completions~])
  set edit:completion:arg-completer[sftp] = (comp:sequence &opts=$ssh-opts [$-ssh-host-completions~])
  set edit:completion:arg-completer[scp]  = (comp:sequence &opts=$ssh-opts [
      {|arg|
        -ssh-host-completions &suffix=":" $arg
        edit:complete-filename $arg
      }
      ...
  ])
#+end_src
